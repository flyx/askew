package output

import (
	"fmt"
	"strings"
	"text/template"

	"github.com/flyx/askew/data"
)

var fileHeader = template.Must(template.New("fileHeader").Parse(`
package {{.PackageName}}

import (
	"github.com/flyx/askew/runtime"
	"github.com/gopherjs/gopherjs/js"
	{{- range $dep, $_ := .Deps }}
	"{{$dep}}"{{ end }}
)
`))

var component = template.Must(template.New("component").Funcs(template.FuncMap{
	"Wrapper":      wrapperForType,
	"PathItems":    pathItems,
	"NameForBound": nameForBound,
	"Last":         last,
	"GenParams": func(params []data.GoValue) string {
		var items []string
		for _, p := range params {
			items = append(items, p.Name+" "+nameForType(p.Type))
		}
		return strings.Join(items, ", ")
	},
	"GenArgs": func(params map[string]data.BoundValue) string {
		items := make([]string, 0, len(params))
		for name := range params {
			items = append(items, fmt.Sprintf("&p%s", name))
		}
		return strings.Join(items, ", ")
	},
	"IsFormValue": func(bk data.BoundKind) bool {
		return bk == data.BoundFormValue
	},
	"Constructor": func(bk data.BoundKind) string {
		switch bk {
		case data.BoundProperty:
			return "NewBoundProperty"
		case data.BoundData:
			return "NewBoundData"
		case data.BoundClass:
			return "NewBoundClass"
		case data.BoundSelf:
			return "NewBoundSelf"
		default:
			panic("unknown BoundKind")
		}
	},
	"GenCallParams": func(params []data.GoValue) string {
		items := make([]string, 0, len(params))
		for _, p := range params {
			items = append(items, p.Name+" runtime.BoundValue")
		}
		return strings.Join(items, ", ")
	},
	"GenTypedArgs": func(params []data.GoValue) string {
		items := make([]string, 0, len(params))
		for _, p := range params {
			items = append(items, fmt.Sprintf("_%s.Get()", p.Name))
		}
		return strings.Join(items, ", ")
	},
	"GenComponentParams": func(params []data.ComponentParam) string {
		items := make([]string, 0, len(params))
		for _, p := range params {
			items = append(items, fmt.Sprintf("%s %s", p.Name, p.Type))
		}
		return strings.Join(items, ", ")
	},
	"ListParamVars": func(params []data.ComponentParam) string {
		items := make([]string, 0, len(params))
		for _, p := range params {
			items = append(items, p.Name)
		}
		return strings.Join(items, ", ")
	},
}).Option("missingkey=error").Parse(`
{{- if and .NeedsController .Handlers}}
// {{.Name}}Controller is the interface for handling events captured from {{.Name}}
type {{.Name}}Controller interface {
	{{- range $name, $handler := .Handlers }}
	{{$name}}({{GenParams $handler.Params }}) bool
	{{- end }}
}
{{- end}}

// {{.Name}} is a DOM component autogenerated by Askew
type {{.Name}} struct {
	root *js.Object
	{{- if and .NeedsController .Handlers }}
	// Controller is the object handling captured events.
	// if nil, events will not be captured.
	Controller {{.Name}}Controller
	{{- end}}
	{{- range .Variables }}
	{{.Variable.Name}} runtime.{{Wrapper .Variable.Type}}
	{{- end}}
	{{- range .Embeds }}
	{{.Field}} {{if not .List}}*{{end}}{{with .Pkg}}{{.}}.{{end}}{{.T}}{{if .List}}List{{end}}
	{{- end}}
}

// New{{.Name}} creates a new component and initializes it with Init.
func New{{.Name}}({{GenComponentParams .Parameters}}) *{{.Name}} {
	ret := new({{.Name}})
	ret.Init({{ListParamVars .Parameters}})
	return ret
}

// Init initializes the component, discarding all previous information.
// The component is initially a DocumentFragment until it gets inserted into
// the main document. It can be manipulated both before and after insertion.
func (o *{{.Name}}) Init({{GenComponentParams .Parameters}}) {
	o.root = runtime.InstantiateTemplateByID("{{.ID}}")
	{{ range .Variables }}
	{{- if IsFormValue .Value.Kind}}
	o.{{.Variable.Name}}.BoundValue = runtime.NewBoundFormValue(o.root, "{{.Value.ID}}", {{.Value.IsRadio}}, {{PathItems .Path .Value.FormDepth}})
	{{- else}}
	o.{{.Variable.Name}}.BoundValue = runtime.{{Constructor .Value.Kind}}(o.root, "{{.Value.ID}}", {{PathItems .Path 0}})
	{{- end}}
	{{- end}}
	{{- range .Assignments}}
	{
		{{- if IsFormValue .Target.Kind}}
		tmp := runtime.NewBoundFormValue(o.root, "{{.Target.ID}}", {{.Target.IsRadio}}, {{PathItems .Path .Target.FormDepth}})
		{{- else}}
		tmp := runtime.{{Constructor .Target.Kind}}(o.root, "{{.Target.ID}}", {{PathItems .Path 0}})
		{{- end}}
		runtime.Assign(tmp, {{.Expression}})
	}
	{{- end}}
	{{- range .Conditionals}}
	if !(${{.Condition}}) {
		_item := runtime.WalkPath(o.root, {{PathItems .Path 0}})
		_parent := _item.Get("parentNode")
		_parent.Call("replaceChild", js.Global.Get("document").Call("createComment", "removed"), _item)
	}
	{{- end}}
	{{- range .Embeds }}
	{
		container := runtime.WalkPath(o.root, {{PathItems .Path 1}})
		{{- if .List}}
		o.{{.Field}}.Init(container, {{Last .Path}})
		{{- else}}
		o.{{.Field}} = {{with .Pkg}}{{.}}.{{end}}New{{.T}}({{.Args.Raw}})
		o.{{.Field}}.InsertInto(container, container.Get("childNodes").Index({{Last .Path}}))
		{{- end}}
	}
	{{- end}}
	{{- range .Captures}}
	{
		src := runtime.WalkPath(o.root, {{PathItems .Path 0}})
		{{- range .Mappings}}
		{
			wrapper := js.MakeFunc(func(this *js.Object, arguments []*js.Object) interface{} {
				{{- range $pName, $bVal := .ParamMappings}}
				var p{{$pName}} runtime.{{NameForBound $bVal.Kind}}
				{{- if IsFormValue $bVal.Kind}}
				p{{$pName}}.Init(this.Call("closest", "form"), "{{$bVal.ID}}", {{$bVal.IsRadio}})
				{{- else}}
				p{{$pName}}.Init(this, "{{$bVal.ID}}")
				{{- end}}
				{{- end}}
				if o.call{{.Handler}}({{GenArgs .ParamMappings}}) {
					arguments[0].Call("preventDefault")
				}
				return nil
			})
			src.Call("addEventListener", "{{.Event}}", wrapper)
		}
		{{- end}}
	}
	{{- end}}
}

// InsertInto inserts this component into the given object. This can only
// be done once. The nodes will be inserted in front of 'before', or
// at the end if 'before' is 'nil'.
func (o *{{.Name}}) InsertInto(parent *js.Object, before *js.Object) {
	parent.Call("insertBefore", o.root, before)
	{{- range .Embeds}}
	{{- if .List}}
	o.{{.Field}}.mgr.UpdateParent(o.root, parent, before)
	{{- end}}
	{{- end}}
}

{{- range $hName, $h := .Handlers}}
func (o *{{$.Name}}) call{{$hName}}({{GenCallParams $h.Params}}) bool {
	{{if $.NeedsController}}
	if o.Controller == nil {
		return false
	}
	{{- end}}
	{{- range $h.Params}}
	_{{.Name}} := runtime.{{Wrapper .Type}}{BoundValue: {{.Name}}}
	{{- end}}
	{{- if $.NeedsController}}
	return o.Controller
	{{- else}}
	return o
	{{- end}}.{{$hName}}({{GenTypedArgs $h.Params}})
}
{{- end}}

{{if .NeedsList}}
// {{.Name}}List is a list of {{.Name}} whose manipulation methods auto-update
// the corresponding nodes in the document.
type {{.Name}}List struct {
	mgr runtime.ListManager
	items []*{{.Name}}
}

// Init initializes the list, discarding previous data.
// The list's items will be placed in the given container, starting at the
// given index.
func (l *{{.Name}}List) Init(container *js.Object, index int) {
	l.mgr = runtime.CreateListManager(container, index)
	l.items = nil
}

// Len returns the number of items in the list.
func (l *{{.Name}}List) Len() int {
	return len(l.items)
}

// Item returns the item at the current index.
func (l *{{.Name}}List) Item(index int) *{{.Name}} {
	return l.items[index]
}

// Append appends the given item to the list.
func (l *{{.Name}}List) Append(item *{{.Name}}) {
	if item == nil {
		panic("cannot append nil to list")
	}
	l.items = append(l.items, item)
	l.mgr.Append(item.root)
	return
}

// Insert inserts the given item at the given index into the list.
func (l *{{.Name}}List) Insert(index int, item *{{.Name}}) {
	var prev *js.Object
	if index < len(l.items) {
		prev = l.items[index].root
	}
	if item == nil {
		panic("cannot insert nil into list")
	}
	l.items = append(l.items, nil)
	copy(l.items[index+1:], l.items[index:])
	l.items[index] = item
	l.mgr.Insert(item.root, prev)
	return
}

// Remove removes the item at the given index from the list.
func (l *{{.Name}}List) Remove(index int) {
	l.mgr.Remove(l.items[index].root)
	copy(l.items[index:], l.items[index+1:])
	l.items = l.items[:len(l.items)-1]
}
{{end}}
`))

var skeleton = template.Must(template.New("skeleton").Funcs(template.FuncMap{
	"PathItems": pathItems,
	"Last":      last,
}).Parse(`
{{range .Embeds}}
// {{.Field}} is part of the main document.
{{- if .List}}
var {{.Field}} {{.Pkg}}.{{.T}}List
{{- else}}
var {{.Field}} = {{.Pkg}}.New{{.T}}({{.Args.Raw}})
{{end}}
{{end}}

func init() {
	document := js.Global.Get("document")
	{{- range .Embeds}}
	{{- if .List}}
	{{.Field}}.Init(runtime.WalkPath(document, {{PathItems .Path 1}}), {{Last .Path}})
	{{- else}}
	{
		container := runtime.WalkPath(document, {{PathItems .Path 1}})
		{{.Field}}.InsertInto(container, container.Get("childNodes").Index({{Last .Path}}))
	}
	{{- end}}
	{{- end}}
}
`))
