package output

import (
	"fmt"
	"strings"
	"text/template"

	"github.com/flyx/tbc/data"
)

var componentList = template.Must(template.New("componentList").Parse(`
// {{.}}List is a list of {{.}} whose manipulation methods auto-update
// the corresponding nodes in the document.
type {{.}}List struct {
	mgr runtime.ListManager
	items []*{{.}}
}

// Init initializes the list, discarding previous data.
// The list is initially a DocumentFragment until it gets inserted into
// the main document. It can be manipulated both before and after insertion.
func (l *{{.}}List) Init(container *js.Object, index int) {
	l.mgr = runtime.CreateListManager(container, index)
	l.items = nil
}

// Len returns the number of items in the list.
func (l *{{.}}List) Len() int {
	return len(l.items)
}

// Item returns the item at the current index.
func (l *{{.}}List) Item(index int) *{{.}}{
	return l.items[index]
}

// Append initializes a new item, appends it to the list and returns it.
func (l *{{.}}List) Append() (ret *{{.}}) {
	ret = New{{.}}()
	l.items = append(l.items, ret)
	l.mgr.Append(ret.root)
	return
}

// Insert initializes a new item, inserts it into the list and returns it.
func (l *{{.}}List) Insert(index int) (ret *{{.}}) {
	var prev *js.Object
	if index < len(l.items) {
		prev = l.items[index].root
	}
	ret = New{{.}}()
	l.items = append(l.items, nil)
	copy(l.items[index+1:], l.items[index:])
	l.items[index] = ret
	l.mgr.Insert(ret.root, prev)
	return
}

// Remove removes the item at the given index from the list.
func (l *{{.}}List) Remove(index int) {
	l.mgr.Remove(l.items[index].root)
	copy(l.items[index:], l.items[index+1:])
	l.items = l.items[:len(l.items)-1]
}
`))

var fileHeader = template.Must(template.New("fileHeader").Parse(`
package {{.PackageName}}

import (
	"github.com/flyx/tbc/runtime"
	"github.com/gopherjs/gopherjs/js"
	{{- range $dep, $_ := .Deps }}
	"{{$dep}}"{{ end }}
)
`))

var componentController = template.Must(template.New("componentController").Funcs(template.FuncMap{
	"GenParams": func(params map[string]data.VariableType) string {
		var items []string
		for pName, pType := range params {
			items = append(items, pName+" "+nameForType(pType))
		}
		return strings.Join(items, ", ")
	}}).Parse(`
// {{.Name}}Controller is the interface for handling events captured from {{.Name}}
type {{.Name}}Controller interface {
	{{- range $name, $handler := .Handlers }}
	{{$name}}({{GenParams $handler.Params }}) bool
	{{- end }}
}
`))

var component = template.Must(template.New("component").Funcs(template.FuncMap{
	"Wrapper":      wrapperForType,
	"PathItems":    pathItems,
	"NameForBound": nameForBound,
	"ParentPath": func(path []int) string {
		return pathItems(path[:len(path)-1])
	},
	"Last": func(path []int) int {
		return path[len(path)-1]
	},
	"GenArgs": func(params map[string]data.BoundValue) string {
		items := make([]string, 0, len(params))
		for name := range params {
			items = append(items, fmt.Sprintf("&p%s", name))
		}
		return strings.Join(items, ", ")
	},
	"Constructor": func(bk data.BoundKind) string {
		switch bk {
		case data.BoundProperty:
			return "NewBoundProperty"
		case data.BoundAttribute:
			return "NewBoundAttribute"
		case data.BoundClass:
			return "NewBoundClass"
		default:
			panic("unknown BoundKind")
		}
	},
}).Option("missingkey=error").Parse(`
// {{.Name}} is a DOM component autogenerated by TBC
type {{.Name}} struct {
	root *js.Object
	{{- if and .NeedsController .Handlers }}
	c {{.Name}}Controller
	{{- end}}
	{{- range .Variables }}
	{{.Name}} runtime.{{Wrapper .Type}}
	{{- end}}
	{{- range .Embeds }}
	{{.Field}} {{if not .List}}*{{end}}{{with .Pkg}}{{.}}.{{end}}{{.T}}{{if .List}}List{{end}}
	{{- end}}
}

// New{{.Name}} creates a new component and initializes it with Init.
func New{{.Name}}() *{{.Name}} {
	ret := new({{.Name}})
	ret.Init()
	return ret
}

// Init initializes the component, discarding all previous information.
// The component is initially a DocumentFragment until it gets inserted into
// the main document. It can be manipulated both before and after insertion.
func (o *{{.Name}}) Init() {
	o.root = runtime.InstantiateTemplateByID("{{.ID}}")
	{{ range .Variables }}
	o.{{.Name}}.BoundValue = runtime.{{Constructor .Value.Kind}}(o.root, "{{.Value.ID}}", {{PathItems .Path}})
	{{- end}}
	{{- range .Embeds }}
	{
		container := runtime.WalkPath(o.root, {{ParentPath .Path}})
		{{- if .List}}
		o.{{.Field}}.Init(container, {{Last .Path}})
		{{- else}}
		o.{{.Field}} = {{with .Pkg}}{{.}}.{{end}}New{{.T}}()
		o.{{.Field}}.InsertInto(container, container.Get("childNodes").Index({{Last .Path}}))
		{{- end}}
	}
	{{- end}}
	{{- range .Captures}}
	{
		src := runtime.WalkPath(o.root, {{PathItems .Path}})
		{{- range .Mappings}}
		{
			wrapper := js.MakeFunc(func(this *js.Object, arguments []*js.Object) interface{} {
				{{- range $pName, $bVal := .ParamMappings}}
				var p{{$pName}} runtime.{{NameForBound $bVal.Kind}}
				p{{$pName}}.Init(this, "{{$bVal.ID}}")
				{{- end}}
				if o.call{{.Handler}}({{GenArgs .ParamMappings}}) {
					arguments[0].Call("preventDefault")
				}
				return nil
			})
			src.Call("addEventListener", "{{.Event}}", wrapper)
		}
		{{- end}}
	}
	{{- end}}
}

// InsertInto inserts this component into the given object. This can only
// be done once. The nodes will be inserted in front of 'before', or
// at the end if 'before' is 'nil'.
func (o *{{.Name}}) InsertInto(parent *js.Object, before *js.Object) {
	parent.Call("insertBefore", o.root, before)
	{{- range .Embeds}}
	{{- if .List}}
	o.{{.Field}}.mgr.UpdateParent(o.root, parent, before)
	{{- end}}
	{{- end}}
}
`))
