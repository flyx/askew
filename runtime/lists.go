package askew

import "syscall/js"

// ListManager is the backend for component lists.
type ListManager struct {
	parent, end js.Value
}

// CreateListManager creates a list manager that inserts list objects at the given
// index between the children of the given parent.
func CreateListManager(parent js.Value, insertAt int) ListManager {
	return ListManager{
		parent: parent, end: parent.Get("childNodes").Index(insertAt)}
}

// UpdateParent sets a new parent node for the manager.
// You need to do this when you move the content nodes from one container to
// another. This commonly happens if the nodes are initially part of a
// DocumentFragment (generated by instantiating a template) but are inserted
// into the main docmuent.
//
// You give the DocumentFragment as oldParent. Only if the list actually acted
// directly in that fragment, it gets updated. You give newEnd as the first node
// in the new parent after the inserted nodes; it is only relevant if this list
// acted on the last item of the DocumentFragment (if not, the node after the
// list's items stays the same).
func (lm *ListManager) UpdateParent(
	oldParent, newParent, newEnd js.Value) {
	if oldParent.Equal(lm.parent) {
		lm.parent = newParent
		if lm.end.IsUndefined() {
			lm.end = newEnd
		} else if newEnd.IsUndefined() {
			if !newParent.Call("contains", lm.end).Bool() {
				lm.end = js.Undefined()
			}
		}
	}
}

// Append appends the given object to the container.
func (lm ListManager) Append(c Component) {
	c.InsertInto(lm.parent, lm.end)
}

// Insert inserts the given object in front of the object `before`.
func (lm ListManager) Insert(c Component, before js.Value) {
	c.InsertInto(lm.parent, before)
}
